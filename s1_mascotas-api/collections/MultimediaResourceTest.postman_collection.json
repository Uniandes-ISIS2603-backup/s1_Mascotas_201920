{
	"info": {
		"_postman_id": "738622a4-f628-44be-a96e-946fe4e795a7",
		"name": "Multimedia Tests",
		"description": "Colección de pruebas sobre el recurso Review",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Crear un usuario",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "288e57a8-59af-4504-a0df-3ed4b76f118e",
						"exec": [
							"var data = JSON.parse(responseBody);",
							"postman.setGlobalVariable(\"new_id_umul\",data.id);",
							"tests[\"no genera error en el Post\"] = responseCode.code === 200;"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n\t\"nombre\": \"Juan\",\n\t\"ciudad\": \"Bogota\",\n\t\"password\": \"password\",\n\t\"correo\": \"juanMMEMUL1234@bta.com\",\n\t\"celular\": 312123212\n}"
				},
				"url": {
					"raw": "http://{{ip}}:{{puerto}}/s1_mascotas-api/api/usuarios/",
					"protocol": "http",
					"host": [
						"{{ip}}"
					],
					"port": "{{puerto}}",
					"path": [
						"s1_mascotas-api",
						"api",
						"usuarios",
						""
					]
				},
				"description": "**Release: Ciclo-2**\r\n\r\nCrea un nuevo usuario. El recurso todos los atributos. El Id es inicializado por la BD y se debe ver en la respuesta. \r\n\r\nPara la prueba, se guarda el id en una variable que será utilizada en otras peticiones de la colección.\r\n\r\n**Código http esperado: 200**"
			},
			"response": []
		},
		{
			"name": "Crear una mascota encontrada",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "304084ed-d326-4e9b-b66a-8c2c95b18e0b",
						"exec": [
							"var data = JSON.parse(responseBody);",
							"postman.setGlobalVariable(\"new_id_memul\",data.id);",
							"tests[\"no genera error en el Post\"] = responseCode.code === 200;"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n\t\"raza\": \"Criollo\",\n\t\"lugar\": \"Bogota\",\n\t\"descripcion\": \"juan@bta.com\",\n\t\"especie\": 0,\n\t\"usuario\": {\n\t\t\"id\": {{new_id_umul}}\n\t},\n\t\"fechaEncontrada\": \"2019-09-10T00:00:00.000Z\"\n}"
				},
				"url": {
					"raw": "http://{{ip}}:{{puerto}}/s1_mascotas-api/api/mascotasencontradas",
					"protocol": "http",
					"host": [
						"{{ip}}"
					],
					"port": "{{puerto}}",
					"path": [
						"s1_mascotas-api",
						"api",
						"mascotasencontradas"
					]
				},
				"description": "**Release: Ciclo-2**\r\n\r\nCrea una nueva mascota encontrada. El recurso tiene todos los atributos. El Id es inicializado por la BD y se debe ver en la respuesta. \r\n\r\nPara la prueba, se guarda el id en una variable que será utilizada en otras peticiones de la colección.\r\n\r\n**Código http esperado: 200**"
			},
			"response": []
		},
		{
			"name": "Crearle una multimedia a una encontrada",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "76074ce3-d5f5-4ccb-9365-194ee7e340de",
						"exec": [
							"var data = JSON.parse(responseBody);",
							"postman.setGlobalVariable(\"new_id_mul\",data.id);",
							"tests[\"no genera error en el Post\"] = responseCode.code === 200;"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"nombre\": \"Multimedia prueba\",\n    \"url\": \"/prueba/prueba\",\n    \"tipo\": \"foto\"\n}"
				},
				"url": {
					"raw": "http://{{ip}}:{{puerto}}/s1_mascotas-api/api/mascotasencontradas/{{new_id_memul}}/multimedia",
					"protocol": "http",
					"host": [
						"{{ip}}"
					],
					"port": "{{puerto}}",
					"path": [
						"s1_mascotas-api",
						"api",
						"mascotasencontradas",
						"{{new_id_memul}}",
						"multimedia"
					]
				},
				"description": "**Release: Ciclo-2**\r\n\r\nCrea una nueva multimedia. El Id es inicializado por la BD y se debe ver en la respuesta. \r\n\r\nPara la prueba, se guarda el id en una variable que será utilizada en otras peticiones de la colección.\r\n\r\n**Código http esperado: 200**"
			},
			"response": []
		},
		{
			"name": "Crearle una multimedia a una encontrada 2",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "76074ce3-d5f5-4ccb-9365-194ee7e340de",
						"exec": [
							"var data = JSON.parse(responseBody);",
							"postman.setGlobalVariable(\"new_id_mul2\",data.id);",
							"tests[\"no genera error en el Post\"] = responseCode.code === 200;"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"nombre\": \"Multimedia prueba 2\",\n    \"url\": \"/prueba222/prueba\",\n    \"tipo\": \"video\"\n}"
				},
				"url": {
					"raw": "http://{{ip}}:{{puerto}}/s1_mascotas-api/api/mascotasencontradas/{{new_id_memul}}/multimedia",
					"protocol": "http",
					"host": [
						"{{ip}}"
					],
					"port": "{{puerto}}",
					"path": [
						"s1_mascotas-api",
						"api",
						"mascotasencontradas",
						"{{new_id_memul}}",
						"multimedia"
					]
				},
				"description": "**Release: Ciclo-2**\r\n\r\nCrea una nueva multimedia. El Id es inicializado por la BD y se debe ver en la respuesta. \r\n\r\nPara la prueba, se guarda el id en una variable que será utilizada en otras peticiones de la colección.\r\n\r\n**Código http esperado: 200**"
			},
			"response": []
		},
		{
			"name": "Crearle una multimedia a una encontrada que no existe",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "235687ad-e750-4fea-b37f-0dccb2edc9bd",
						"exec": [
							"tests[\"No se puede asociar una multimedia a una mascota que no existe.\"] = responseCode.code === 404;",
							"tests[\"Mensaje correcto de error\"] = responseBody.has(\"El recurso /mascotasencontradas/0/multimedia no existe.\");"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"nombre\": \"Multimedia prueba 2\",\n    \"url\": \"/prueba222/prueba\",\n    \"tipo\": \"video\"\n}"
				},
				"url": {
					"raw": "http://{{ip}}:{{puerto}}/s1_mascotas-api/api/mascotasencontradas/0/multimedia",
					"protocol": "http",
					"host": [
						"{{ip}}"
					],
					"port": "{{puerto}}",
					"path": [
						"s1_mascotas-api",
						"api",
						"mascotasencontradas",
						"0",
						"multimedia"
					]
				},
				"description": "**Release: Paso-5**\r\n\r\nCrea un nueva nueva reseña pero con un libro que no existe. Verifica que se genera el error y el mensaje \"El recurso /books/0/reviews no existe\".\r\n\r\n**Código HTTP esperado: 404**"
			},
			"response": []
		},
		{
			"name": "Obtener toda la multimedia de una encontrada",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "030da90b-93b3-4d13-b4e8-db57d0af4c07",
						"exec": [
							"var data= JSON.parse(responseBody);",
							"tests[\"no genera error en el Get All\"] = responseCode.code === 200;",
							"tests[\"reviews count\"] = data.length >= 0;"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://{{ip}}:{{puerto}}/s1_mascotas-api/api/mascotasencontradas/{{new_id_memul}}/multimedia",
					"protocol": "http",
					"host": [
						"{{ip}}"
					],
					"port": "{{puerto}}",
					"path": [
						"s1_mascotas-api",
						"api",
						"mascotasencontradas",
						"{{new_id_memul}}",
						"multimedia"
					]
				},
				"description": "**Release: Ciclo-2**\r\n\r\nConsulta toda la multimedia de una mascota en la aplicación. \r\nLa petición no tiene cuerpo.\r\n\r\nSe envía el Id del libro a consultar en la URL de la petición.\r\n\r\n**Código http esperado: 200**"
			},
			"response": []
		},
		{
			"name": "Obtener una multimedia de una encontrada",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "15578bb7-15b6-4871-93b6-559ea819e22c",
						"exec": [
							"console.log(responseBody);",
							"var data = JSON.parse(responseBody);",
							"tests[\"no genera error en el Get\"] = responseCode.code === 200;"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://{{ip}}:{{puerto}}/s1_mascotas-api/api/mascotasencontradas/{{new_id_memul}}/multimedia/{{new_id_mul}}",
					"protocol": "http",
					"host": [
						"{{ip}}"
					],
					"port": "{{puerto}}",
					"path": [
						"s1_mascotas-api",
						"api",
						"mascotasencontradas",
						"{{new_id_memul}}",
						"multimedia",
						"{{new_id_mul}}"
					]
				},
				"description": "**Release: Ciclo-2**\r\n\r\nConsulta una multimedia de una mascota en la aplicación. \r\nLa petición no tiene cuerpo.\r\n\r\nSe envía el Id de la mascota y de la multimedia a consultar en la URL de la petición.\r\n\r\n**Código http esperado: 200**"
			},
			"response": []
		},
		{
			"name": "Editarle una multimedia a una encontrada",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "84b4ef5d-3e7d-4a61-80f4-231125db4e8f",
						"exec": [
							"console.log(responseBody);",
							"var data = JSON.parse(responseBody);",
							"tests[\"no genera error en el Put\"] = responseCode.code === 200;"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"nombre\": \"Tiene ahora un nombre diferente la multimedia\",\n    \"url\": \"Hayyyyy\",\n    \"tipo\": \"video\"\n}"
				},
				"url": {
					"raw": "http://{{ip}}:{{puerto}}/s1_mascotas-api/api/mascotasencontradas/{{new_id_memul}}/multimedia/{{new_id_mul}}",
					"protocol": "http",
					"host": [
						"{{ip}}"
					],
					"port": "{{puerto}}",
					"path": [
						"s1_mascotas-api",
						"api",
						"mascotasencontradas",
						"{{new_id_memul}}",
						"multimedia",
						"{{new_id_mul}}"
					]
				},
				"description": "**Release: Ciclo-2**\r\n\r\nActualiza una multimedia a una mascota existente. Se envían los Ids de las entidades asociar en la URL de la petición.\r\n\r\n**Código http esperado: 200**"
			},
			"response": []
		},
		{
			"name": "Editarle una reseña que no existe a un libro",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "02be10e6-750b-4b74-95e7-d927a166ec02",
						"exec": [
							"tests[\"No se puede editar una multimedia que no existe.\"] = responseCode.code === 404;",
							"tests[\"Mensaje correcto de error\"] = responseBody.has(\"El recurso /multimedia/0 no existe.\");"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"nombre\": \"Tiene ahora un nombre no la multimedia\",\n    \"url\": \"Se edita\"\n}"
				},
				"url": {
					"raw": "http://{{ip}}:{{puerto}}/s1_mascotas-api/api/mascotasencontradas/{{new_id_memul}}/multimedia/0",
					"protocol": "http",
					"host": [
						"{{ip}}"
					],
					"port": "{{puerto}}",
					"path": [
						"s1_mascotas-api",
						"api",
						"mascotasencontradas",
						"{{new_id_memul}}",
						"multimedia",
						"0"
					]
				},
				"description": "**Release: Ciclo-2**\r\n\r\nActualiza una multimedia que no existe a una mascota. \r\n\r\nPara la prueba se verifica que se genera el error y el mensaje \"El recurso /multimedia/0 no existe.\".\r\n\r\n**Código HTTP esperado: 404**"
			},
			"response": []
		},
		{
			"name": "Editarle una multimedia a una encontrada que no existe",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "ce6fc66f-cb19-4e0d-bc0a-aff100e295ee",
						"exec": [
							"tests[\"No se puede editar una multimedia de una mascota que no existe.\"] = responseCode.code === 404;",
							"tests[\"Mensaje correcto de error\"] = responseBody.has(\"El recurso /mascotasencontradas/0/multimedia no existe.\");"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"nombre\": \"Tiene ahora un nombre no la multimedia\",\n    \"url\": \"Se edita\"\n}"
				},
				"url": {
					"raw": "http://{{ip}}:{{puerto}}/s1_mascotas-api/api/mascotasencontradas/0/multimedia/{{new_id_mul}}",
					"protocol": "http",
					"host": [
						"{{ip}}"
					],
					"port": "{{puerto}}",
					"path": [
						"s1_mascotas-api",
						"api",
						"mascotasencontradas",
						"0",
						"multimedia",
						"{{new_id_mul}}"
					]
				},
				"description": "**Release: Ciclo-2**\r\n\r\nEdita una multimedia a una mascota que no existe.\r\n\r\nPara la prueba se verifica que se genera el error y el mensaje \"El recurso /mascotasencontradas/0 no existe.\".\r\n\r\n**Código HTTP esperado: 404**"
			},
			"response": []
		},
		{
			"name": "Borrar una multimedia que no existe",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "edb58a8e-9d1a-4d6f-9942-6fe3c8a169e9",
						"exec": [
							"tests[\"No se puede borrar una multimedia que no existe.\"] = responseCode.code === 404;",
							"tests[\"Mensaje correcto de error\"] = responseBody.has(\"El recurso /multimedia/0 no existe.\");"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "http://{{ip}}:{{puerto}}/s1_mascotas-api/api/mascotasencontradas/{{new_id_memul}}/multimedia/0",
					"protocol": "http",
					"host": [
						"{{ip}}"
					],
					"port": "{{puerto}}",
					"path": [
						"s1_mascotas-api",
						"api",
						"mascotasencontradas",
						"{{new_id_memul}}",
						"multimedia",
						"0"
					]
				},
				"description": "**Release: Ciclo-2**\r\n\r\nBorra una multimedia que no existe en la aplicación.  \r\n\r\nPara la prueba se verifica que se genera el error.\r\n\r\n**Código http esperado: 404**"
			},
			"response": []
		},
		{
			"name": "Borrarle una multimedia de una encontrada que no existe",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "0c199000-a389-4706-8406-5cdc8f12186b",
						"exec": [
							"tests[\"No se puede borrar una multimedia de una mascota que no existe.\"] = responseCode.code === 404;",
							"tests[\"Mensaje correcto de error\"] = responseBody.has(\"El recurso /mascotasencontradas/0/multimedia no existe.\");"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "http://{{ip}}:{{puerto}}/s1_mascotas-api/api/mascotasencontradas/0/multimedia/{{new_id_mul}}",
					"protocol": "http",
					"host": [
						"{{ip}}"
					],
					"port": "{{puerto}}",
					"path": [
						"s1_mascotas-api",
						"api",
						"mascotasencontradas",
						"0",
						"multimedia",
						"{{new_id_mul}}"
					]
				},
				"description": "**Release: Ciclo-2**\r\n\r\nBorra una multimedia de una mascota que no existe en la aplicación.  \r\n\r\nPara la prueba se verifica que se genera el error y el mensaje \"El recurso /mascotasencontradas/0/multimedia no existe.\".\r\n\r\n**Código http esperado: 404**"
			},
			"response": []
		},
		{
			"name": "Borrarle una multimedia a una encontrada",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "2bb9aa81-6adb-4c8d-b7cd-20f8c7301f8d",
						"exec": [
							"tests[\"no genera error en el Delete\"] = responseCode.code === 204;"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "http://{{ip}}:{{puerto}}/s1_mascotas-api/api/mascotasencontradas/{{new_id_memul}}/multimedia/{{new_id_mul}}",
					"protocol": "http",
					"host": [
						"{{ip}}"
					],
					"port": "{{puerto}}",
					"path": [
						"s1_mascotas-api",
						"api",
						"mascotasencontradas",
						"{{new_id_memul}}",
						"multimedia",
						"{{new_id_mul}}"
					]
				},
				"description": "**Release: Ciclo-2**\n\nBorra una multimedia asociada a una mascota. Se envían los ids de la multimedia y la mascota creados anteriormente.\n\n**Código HTTP esperado: 204**"
			},
			"response": []
		},
		{
			"name": "Borrarle una multimedia 2 a una encontrada",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "39e4ff08-1c18-4cab-a775-f054d1e7389a",
						"exec": [
							"tests[\"no genera error en el Delete\"] = responseCode.code === 204;"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "http://{{ip}}:{{puerto}}/s1_mascotas-api/api/mascotasencontradas/{{new_id_memul}}/multimedia/{{new_id_mul2}}",
					"protocol": "http",
					"host": [
						"{{ip}}"
					],
					"port": "{{puerto}}",
					"path": [
						"s1_mascotas-api",
						"api",
						"mascotasencontradas",
						"{{new_id_memul}}",
						"multimedia",
						"{{new_id_mul2}}"
					]
				},
				"description": "**Release: Ciclo-2**\n\nBorra una multimedia asociada a una mascota. Se envían los ids de la multimedia y la mascota creados anteriormente.\n\n**Código HTTP esperado: 204**"
			},
			"response": []
		},
		{
			"name": "Borrar una mascota encontrada",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "2ec74fba-bc15-4973-99bd-0c1a86a28a2e",
						"exec": [
							"tests[\"No genera error en el Delete\"] = responseCode.code === 204;"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "http://{{ip}}:{{puerto}}/s1_mascotas-api/api/mascotasencontradas/{{new_id_memul}}",
					"protocol": "http",
					"host": [
						"{{ip}}"
					],
					"port": "{{puerto}}",
					"path": [
						"s1_mascotas-api",
						"api",
						"mascotasencontradas",
						"{{new_id_memul}}"
					]
				},
				"description": "**Release: Ciclo-2**\n\nBorra una mascota. Se envía el id de la mascota creado anteriormente.\n\n**Código HTTP esperado: 204**"
			},
			"response": []
		},
		{
			"name": "Borrar un usuario",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "d40b53c5-ed60-4b95-9432-09f2201a8509",
						"exec": [
							"tests[\"No genera error en el Delete\"] = responseCode.code === 204;"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "http://{{ip}}:{{puerto}}/s1_mascotas-api/api/usuarios/{{new_id_umul}}",
					"protocol": "http",
					"host": [
						"{{ip}}"
					],
					"port": "{{puerto}}",
					"path": [
						"s1_mascotas-api",
						"api",
						"usuarios",
						"{{new_id_umul}}"
					]
				},
				"description": "**Release: Ciclo-2**\n\nBorra un usuario. Se envía el id del usuario creado en la primera petición.\n\n**Código HTTP esperado: 204**"
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"id": "00d22f9f-0cad-4e06-8a85-ed1c41a4a1fc",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"id": "0d40a238-261c-43f6-a7fc-b63475c69de5",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"protocolProfileBehavior": {}
}